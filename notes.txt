*control flow


CHAPTER 01
==========

* Statements are not required to end in a semicolon ;

* Providing a value at the point when you declare a const/var allows the compiler to infer its type, thus:
	* Create a const value using the ‘let’ keyword
	* Create a variable using the ‘var’ keyword
  NOTE: type inference will default floating-point values to type Double

* You may, however, explicitly define your data types as well:
	* let explicitDouble: Double = 70.7

* Values are never implicitly converted between types, so you must explicitly cast when needed.
  Create an instance of the destination type and cast as you would in Java/C++:
	let label = “The width is “
	let width = 94
	let widthLabel = label + String(width)
	*NOTE:* Both (type)value and type(value) are acceptable

* You can also inline values into a string, by enclosing the variable name in (parens) and preceding it with a \
  as in:  \(someVar)  or   \(apples + oranges)

* Three double-quotes “”” mark the beginning and end of a multi-line string. You can include “ single quotes
  within such a string without escape sequences if desired. The leading whitespace on each of these lines will
  be removed so long as it matches the leading whitespace of the final line

* Dictionaries and arrays are created using brackets, and look like this when the values are known:
	* let anArray = [“apple”, “orange”, “banana”]

	* var dictionary = [
		“keyOne” : “valueOne”,
	 	“keyTwo” : “valueTwo”
	]

	NOTE to create an EMPTY array or dictionary, you need to use the initializer syntax where you specify
	the data type in the brackets and follow it with empty parens:
		* var emptyArray = [String]()
		* var emptyDict = [String : Float]()

	NOTE when the data types can be inferred, you can write empty arrays and dictionaries as such:
		* var emptyArray = []
		* var emptyDict = [:]

* LOOPS and CONTROL FLOW:
	if, switch, for-in, repeat-while, while
	
	The parens around the condition are optional, but the { braces } around the body are required
	for item in shoppingList { . . . }

	if (condition) { . . . } 
		* condition MUST be boolean, C++ tricks don’t work here

	if let newVar = someOptionalVar { . . . }
		* if someOptionalVar was nil, the body is skipped. this is one way to work with optionals
		* you could also just check for if (someOptionalar != nil) { . . . }

	for item in collection { . . . }

	for i in 0..<4 { // gives 3 iterations }

	for i in 0...4 { // gives 4 iterations }

	switch something {
	  case “value one” :
		print(“first case”);
	  case “value two”, “value three” :
		print(“simulated fall-through”);
	  default :
		print(“default case”);
	}
	

	repeat { . . . } while (condition)


* Swift has optional values. You create an optional by making an explicit declaration with ? after the type:
	var optionalString: String? = “Some string.”
	var optionalThing: String? = nil

* null is replaced by nil.

* You can use if and let together to test for optional values:
	var optionalName: String? = “Billy Bob”;
	if let name = optionalName {
	  // do something
	}

	Here, if optionalName was nil, the if evaluates to false, so the { body } is skipped.

* Switches don’t require a break statement for each case.
  They also don’t have fallthrough, so if you want to simulate that, just separate the different cases with a comma


* Functions are declared *basically* the same way, but the syntax is a little more involved.
  Example:
	// create a function
	func funcName(paramName: type, paramName2: type) -> returnType { . . . }

	// call a function
	funcName(paramName: val, paramName2: val);

  The parameters each need a name and a type, as usual, in the Swift style such as: (person: String, age: Int)
  When you call the function, you’ll need to provide both the parameter label and the value.
  By default the function uses the the parameter names as the labels, but by providing an additional label you can
    use those instead. By providing an _ underscore, you can use no label at all.
  Keep in mind, in the FUNCTION BODY you’ll refer to them as their default label, but when calling the function you’ll
  use either the default label, the custom label, or no label, depending on how you’ve created your function.
  Here’s the differences in action:

	// DEFAULT LABELS
	func greet(person: String, day: String) -> String {
	  return “Hello \(person), today is \(day)!”;
	}

	greet(person: “BillyBob”, day: “Tuesday”);

	// CUSTOM / NO LABELS
	func greet(_ person: String, on day: String) -> String {
	  return “Hello, \(person), today is \(day)!”;
	}

	greet(“BillyBob”, on: “Tuesday”);

  PASSING AN ARRAY to a function? The type for the label should be the datatype in [brackets], like:  scores: [Int]

  WANT TO RETURN MULTIPLE VALUES? Use a tuple, whose values can be referred to by name or index.
  For example, how about a function that returns a tuple with 3 values, min, max, and sum:
	func returnsTuple(scores: [Int]) -> (min: Int, max: Int, sum: Int) {
	  // do stuff
	  return (min, max, sum);
	}

	// get a tuple from the returnsTuple() function
	let something = returnsTuple(scores: [3, 6, 3, 9, 0, 9, 10]);

	// access the ‘sum’ field of the tuple, ‘something’:
	print(something.sum);
	print(something[2]);
  



\()
  include (in parens) variables and/or calculations directly into a string

“””
  three double-quotes mark the beginning and end of a string that takes up multiple lines of code,
  within which you can include “ single quotes without escape sequences if desired.
  any leading whitespace on each line is removed as long as it matches the whitespace of the last double quoted line

[]
  encloses the contents of an array or dictionary.
  elements are accessed by index or key

0..<N
  use with a for-in loop to set a number of iterations up to but not including N

0...N
  use with a for-in loop to set a number of iterations up to and including N

func
  signifies that you’re declaring a function.
  func functionName(label: Type, label: Type…) -> ReturnType { . . . }

let
  creates a constant

nil
  basically null

var
  creates a variable









* Exercises from Chapter 01:
	1.) Create a constant with an explicit type of ‘Float’ and a value of 4
	2.) Given:
		let label = “The width is “
		let width = 94
		let widthLabel = label + String(width)
	    Remove the conversion to String from the last line.
	    What error do you get?
	3.) Use \() to include a floating-point calculation and a person’s name into a string
	4.) 
		